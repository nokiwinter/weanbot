import telebot
from openai import OpenAI
import time


 # await ctx.send('```!ai - !–∞–∏  |  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ò–ò. (–ü—Ä–∏–º–µ—Ä: !ai –∫–∞–∫ –¥–µ–ª–∞? | –í—ã–≤–æ–¥: ü§îüí≠üëç)```')

client = OpenAI(api_key='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')
bot = telebot.TeleBot('6719369577:AAG5oC6ajaPsb2C8IvJhc1Ugl6a5iAze5ps')

@bot.message_handler(commands=['start'])
def start(message):
    mess = f'–ü—Ä–∏–≤–µ—Ç *{message.from_user.first_name}*! üëãü§ñ\n'
    mess2 = f'*–ß—Ç–æ —è —É–º–µ—é?* ‚ú®\n\n‚ãÖ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–º–∞–π–ª–∏–∫–æ–≤.\n‚ãÖ –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç—ã –Ω–∞ —Ä–∞–∑–Ω—ã–µ —è–∑—ã–∫–∏.\n‚ãÖ –ü–æ–º–æ–≥–∞—Ç—å –≤ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –∫–æ–¥–∞.\n‚ãÖ –°–æ–∑–¥–∞–≤–∞—Ç—å —Ç–µ–∫—Å—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É.\n‚ãÖ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –ø–æ–º–æ—â—å —Å —É—Ä–æ–∫–∞–º–∏ –∏ –æ–±—É—á–µ–Ω–∏–µ–º.\n‚ãÖ –í—ã–ø–æ–ª–Ω—è—Ç—å –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∑–∞–ø—Ä–æ—Å–∞–º.\n‚ãÖ –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–º–¥, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ *"/help"* ü§ñüåê'
    bot.send_message(message.chat.id, mess, parse_mode= "Markdown")
    bot.send_message(message.chat.id, mess2, parse_mode= "Markdown")

@bot.message_handler(commands=['help'])
def help(message):
    mess_help = f'*/ai* | –ö–ª–∞—Å–∏—á–Ω—ã–π –ò–ò ü§ñ _(–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ai –ü—Ä–∏–≤–µ—Ç!)_\n*/emoji* | –ò–ò –æ—Ç–≤–µ—á–∞–µ—Ç –≤ –µ–º–æ–¥–∑–∏ ‚ú® _(–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /emoji –ü—Ä–∏–≤–µ—Ç!)_'
    bot.send_message(message.chat.id, mess_help, parse_mode= "Markdown")

@bot.message_handler(commands=['emoji'])
def emoji(message):
    result = str(message)
    response = client.chat.completions.create(
    model="gpt-3.5-turbo-0301",
    messages=[
        {
        "role": "system",
        "content": "You will be provided with a message, and your task is to respond using emojis only."
        },
        {
        "role": "user",
        "content": result
        }
    ],
    temperature=0.8,
    max_tokens=64,
    top_p=1
    )
    print(f'{result} {response}')
    bot.send_message(message.chat.id, response.choices[0].message.content, parse_mode= "html")


@bot.message_handler(commands=['ai'])
def ai(message):
    result2 = str(message)
    response = client.chat.completions.create(
    model="gpt-3.5-turbo-0301",
    messages=[
        {
        "role": "system",
        "content": "You will be provided with a message, and your task is to respond."
        },
        {
        "role": "user",
        "content": result2
        }
    ],
    temperature=0
    )
    print(f'{result2} {response}')
    bot.send_message(message.chat.id, response.choices[0].message.content, parse_mode="html")


bot.polling(none_stop=True)
